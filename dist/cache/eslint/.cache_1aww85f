[{"/Users/aaxis/Documents/lottery/pages/_app.tsx":"1","/Users/aaxis/Documents/lottery/pages/api/hello.ts":"2","/Users/aaxis/Documents/lottery/pages/index.tsx":"3","/Users/aaxis/Documents/lottery/components/ELSBlock.tsx":"4","/Users/aaxis/Documents/lottery/components/Tab.tsx":"5","/Users/aaxis/Documents/lottery/components/TurnTable.tsx":"6","/Users/aaxis/Documents/lottery/components/Weekend.tsx":"7","/Users/aaxis/Documents/lottery/components/index.tsx":"8"},{"size":228,"mtime":1685612893661,"results":"9","hashOfConfig":"10"},{"size":307,"mtime":1685612893661,"results":"11","hashOfConfig":"10"},{"size":430,"mtime":1685613184580,"results":"12","hashOfConfig":"10"},{"size":17291,"mtime":1685695262182,"results":"13","hashOfConfig":"10"},{"size":910,"mtime":1685612893658,"results":"14","hashOfConfig":"10"},{"size":5366,"mtime":1685612893658,"results":"15","hashOfConfig":"10"},{"size":3436,"mtime":1685612893658,"results":"16","hashOfConfig":"10"},{"size":150,"mtime":1685613178885,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"21v68d",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aaxis/Documents/lottery/pages/_app.tsx",[],[],"/Users/aaxis/Documents/lottery/pages/api/hello.ts",[],[],"/Users/aaxis/Documents/lottery/pages/index.tsx",[],[],"/Users/aaxis/Documents/lottery/components/ELSBlock.tsx",["45"],[],"import type { FC } from 'react';\nimport { useState } from 'react';\nimport { useEffect, useRef } from 'react';\nimport React from 'react';\n\nconst COL = 10;\nconst ROW = 16;\nenum EType {\n  I = 'I',\n  O = 'O',\n  Z = 'Z',\n  L = 'L',\n  W = 'W',\n}\n\nconst getZeroLen = (len: number) => {\n  let str = '';\n  for (let i = 0; i < len; i++) {\n    str += '0';\n  }\n  return str;\n};\n\nconst START_LIST = [\n  {\n    type: EType.W,\n    item: [\n      Number(`0b01${getZeroLen(COL - 2)}`),\n      Number(`0b111${getZeroLen(COL - 3)}`),\n    ],\n  },\n  {\n    type: EType.O,\n    item: [\n      Number(`0b11${getZeroLen(COL - 2)}`),\n      Number(`0b11${getZeroLen(COL - 2)}`),\n    ],\n  },\n  {\n    type: EType.I,\n    item: [\n      Number(`0b10${getZeroLen(COL - 2)}`),\n      Number(`0b10${getZeroLen(COL - 2)}`),\n      Number(`0b10${getZeroLen(COL - 2)}`),\n      Number(`0b10${getZeroLen(COL - 2)}`),\n    ],\n  },\n  {\n    type: EType.L,\n    item: [\n      Number(`0b10${getZeroLen(COL - 2)}`),\n      Number(`0b111${getZeroLen(COL - 3)}`),\n    ],\n  },\n  {\n    type: EType.L,\n    item: [\n      Number(`0b001${getZeroLen(COL - 3)}`),\n      Number(`0b111${getZeroLen(COL - 3)}`),\n    ],\n  },\n  {\n    type: EType.Z,\n    item: [\n      Number(`0b11${getZeroLen(COL - 2)}`),\n      Number(`0b011${getZeroLen(COL - 3)}`),\n    ],\n  },\n];\n\nlet timer: NodeJS.Timer | null = null;\n\nexport const ELSBlock: FC = () => {\n  const decimalToBinary = (value: number, len: number = COL) => {\n    return (value || 0).toString(2).padStart(len, '0');\n  };\n\n  const getRandom = (n: number) => {\n    return Math.floor(Math.random() * Math.floor(n));\n  };\n\n  const [showList, setShowList] = useState(new Array(ROW).fill(0));\n\n  const [moving, setMoving] = useState(new Array(ROW).fill(0));\n  const [isPaused, setIsPaused] = useState(false);\n  const [isStared, setIsStared] = useState(false);\n  const showListRef = useRef(showList);\n  const movingRef = useRef(moving);\n  const isGaming = useRef(false);\n  const movingType = useRef({\n    type: EType.I,\n    transferred: false,\n  });\n  const totalScore = useRef(0);\n\n  useEffect(() => {\n    showListRef.current = showList;\n  }, [showList]);\n\n  useEffect(() => {\n    movingRef.current = moving;\n  }, [moving]);\n\n  const onRight = (list: number[]) => {\n    let cantMove = false;\n    const newMoving = list.map((item) => {\n      if (decimalToBinary(item).at(-1) === '1') {\n        cantMove = true;\n      }\n      return item >> 1;\n    });\n    return cantMove ? list : newMoving;\n  };\n\n  const onLeft = (list: number[]) => {\n    let cantMove = false;\n    const newMoving = list.map((item) => {\n      if (decimalToBinary(item).at(0) === '1') {\n        cantMove = true;\n      }\n      return item << 1;\n    });\n    return cantMove ? list : newMoving;\n  };\n\n  const onDown = (list: number[]) => {\n    const newMoving = [0, ...list.slice(0, -1)];\n    return newMoving;\n  };\n\n  const onCreateNewBlock = () => {\n    const { item: startItem, type } = START_LIST[getRandom(START_LIST.length)];\n    movingType.current.type = type;\n    movingType.current.transferred = false;\n    const maxMoveStep = Math.min(\n      ...startItem.map((item) => item.toString(2).match(/0/g)?.length ?? 0)\n    );\n    const random = getRandom(maxMoveStep);\n    const randomStartItem = startItem.map((item) => item >> random);\n\n    return randomStartItem;\n  };\n  const onStart = () => {\n    const startItem = onCreateNewBlock();\n    return startItem;\n  };\n\n  const onEndCurrent = (movingList: number[], targetList: number[]) => {\n    const newTarget: number[] = [];\n    targetList.map((item, index) => {\n      if (item === 0) {\n        newTarget[index] = movingList[index];\n      } else {\n        const movingBinary = decimalToBinary(movingList[index]);\n        const targetBinary = decimalToBinary(targetList[index]);\n\n        newTarget[index] =\n          Number('0b' + movingBinary) ^ Number('0b' + targetBinary);\n      }\n    });\n\n    return newTarget;\n  };\n\n  const isTrigger = (movingList: number[], targetList: number[]) => {\n    let isTrigger = false;\n    targetList.map((item, index) => {\n      if (!item) {\n        return;\n      }\n      const lastNewIndex = index;\n      const movingBinary = decimalToBinary(movingList[lastNewIndex] ?? 0);\n      const targetBinary = decimalToBinary(targetList[lastNewIndex] ?? 0);\n      movingBinary.split('').map((item, index) => {\n        if (item === '1' && targetBinary[index] === '1') {\n          isTrigger = true;\n        }\n      });\n    });\n    return isTrigger;\n  };\n\n  const clearRow = (list: number[]) => {\n    const newList: number[] = [];\n    list.map((item) => {\n      if (item === 2 ** COL - 1) {\n        newList.unshift(0);\n        totalScore.current += 1;\n      } else {\n        newList.push(item);\n      }\n    });\n    return newList;\n  };\n\n  const handleStart = () => {\n    const startItem = onStart();\n\n    const newMoving = new Array(ROW).fill(0);\n\n    startItem.forEach((item, index) => {\n      newMoving[index] = item;\n    });\n    setMoving(newMoving);\n    if (isTrigger(newMoving, showListRef.current)) {\n      isGaming.current = false;\n      setIsPaused(false);\n      setIsStared(false);\n      timer && clearInterval(timer);\n      console.log('over');\n    }\n  };\n\n  const handleDown = () => {\n    if (!isGaming.current) {\n      return;\n    }\n    const newMoving = onDown(movingRef.current);\n\n    if (isTrigger(newMoving, showListRef.current) || movingRef.current.at(-1)) {\n      const endList = onEndCurrent(movingRef.current, showListRef.current);\n      setMoving([]);\n      const newList = clearRow(endList);\n      setShowList(newList);\n      handleStart();\n      return;\n    }\n    setMoving(newMoving);\n  };\n\n  const handleLeft = () => {\n    if (!isGaming.current) {\n      return;\n    }\n    const newMoving = onLeft(movingRef.current);\n    if (isTrigger(newMoving, showListRef.current)) {\n      return;\n    }\n    setMoving(newMoving);\n  };\n\n  const handleRight = () => {\n    if (!isGaming.current) {\n      return;\n    }\n    const newMoving = onRight(movingRef.current);\n    if (isTrigger(newMoving, showListRef.current)) {\n      return;\n    }\n    setMoving(newMoving);\n  };\n\n  const onTransfer = (list: number[], type: EType) => {\n    const allArray = list.map((item) => {\n      return decimalToBinary(item).split('');\n    });\n    let transferred = true;\n\n    const rotateArray = (type: EType) => {\n      let center: number[] = [Infinity, Infinity];\n      const size = 3;\n      allArray.map((item, i) => {\n        item.map((item, j) => {\n          if (i === ROW - 1 || j == COL - 1) {\n            return;\n          }\n          if (type === EType.W) {\n            if (\n              Number(allArray?.[i]?.[j - 1]) +\n                Number(allArray?.[i]?.[j + 1]) +\n                Number(allArray?.[i - 1]?.[j]) +\n                Number(allArray?.[i + 1]?.[j]) ===\n              3\n            ) {\n              center = [i, j];\n            }\n          }\n          if (type === EType.L) {\n            if (\n              Number(allArray?.[i]?.[j - 1]) +\n                Number(allArray?.[i]?.[j + 1]) ===\n                2 ||\n              Number(allArray?.[i - 1]?.[j]) +\n                Number(allArray?.[i + 1]?.[j]) ===\n                2\n            ) {\n              center = [i, j];\n            }\n          }\n        });\n      });\n\n      const startI = center[0] - 1;\n      const startJ = center[1] - 1;\n\n      if (\n        startI + size > ROW ||\n        startJ + size > COL ||\n        startI < 0 ||\n        startJ < 0\n      ) {\n        return { list, transferred: false };\n      }\n\n      const sliceArray = allArray\n        .slice(startI, startI + size + 1)\n        .map((item) => item.slice(startJ, startJ + size + 1));\n\n      const transferArray: string[][] = new Array(size)\n        .fill(0)\n        .map(() => new Array(size).fill('0'));\n\n      for (let i = 0; i < size; i++) {\n        for (let j = size - 1; j >= 0; j--) {\n          transferArray[i][size - j - 1] = sliceArray[j][i];\n        }\n      }\n\n      for (let i = 0; i < transferArray.length; i++) {\n        for (let j = 0; j < transferArray[i].length; j++) {\n          allArray[i + startI][j + startJ] = transferArray[i][j];\n        }\n      }\n      const newTransferArray = allArray.map((item, index) => {\n        return Number('0b' + item.join(''));\n      });\n      return { list: newTransferArray, transferred };\n    };\n\n    switch (type) {\n      case EType.I: {\n        let startI = -1;\n        let startJ = -1;\n        const size = 4;\n        const newAllArray = allArray.map((item, i) => {\n          return item.map((item, j) => {\n            if (item === '1' && startI === -1 && startJ === -1) {\n              startI = i;\n              startJ = j;\n            }\n            if (movingType.current.transferred) {\n              if (startI + size > ROW) {\n                transferred = false;\n              }\n              if (j === startJ && i < startI + size) {\n                return '1';\n              }\n              return '0';\n            } else {\n              if (startJ + size > COL) {\n                transferred = false;\n              }\n              if (i === startI && j < startJ + size) {\n                return '1';\n              }\n              return '0';\n            }\n          });\n        });\n\n        return {\n          list: newAllArray.map((item) => Number('0b' + item.join(''))),\n          transferred,\n        };\n      }\n      case EType.W: {\n        return rotateArray(type);\n      }\n      case EType.L: {\n        return rotateArray(type);\n      }\n      case EType.Z: {\n        let startI = -1;\n        let startJ = -1;\n\n        for (let i = 0; i < allArray.length; i++) {\n          for (let j = 0; j < allArray[i].length; j++) {\n            if (allArray[i][j] === '1' && startI === -1 && startJ === -1) {\n              startI = i;\n              startJ = j;\n              break;\n            }\n          }\n          if (startI !== -1 && startJ !== -1) {\n            break;\n          }\n        }\n        const newAllArray = allArray.map((item, i) => {\n          return item.map((item, j) => {\n            if (item === '1' && startI === -1 && startJ === -1) {\n              startI = i;\n              startJ = j;\n            }\n            if (movingType.current.transferred) {\n              if (startJ === 1) {\n                transferred = false;\n              }\n              if (\n                (i === startI && (j === startJ - 1 || j === startJ - 2)) ||\n                (i === startI + 1 && (j === startJ || j === startJ - 1))\n              ) {\n                return '1';\n              }\n              return '0';\n            } else {\n              if (startI >= ROW - 2) {\n                transferred = false;\n              }\n              if (\n                (i === startI && j === startJ + 2) ||\n                (i === startI + 1 && (j === startJ + 1 || j === startJ + 2)) ||\n                (i === startI + 2 && j == startJ + 1)\n              ) {\n                return '1';\n              }\n              return '0';\n            }\n          });\n        });\n\n        return {\n          list: newAllArray.map((item) => Number('0b' + item.join(''))),\n          transferred,\n        };\n      }\n\n      default:\n        break;\n    }\n    return { list, transferred: false };\n  };\n  const handleTransfer = () => {\n    if (!isGaming.current) {\n      return;\n    }\n    const { list: newTransfer, transferred } = onTransfer(\n      movingRef.current,\n      movingType.current.type\n    );\n\n    if (isTrigger(newTransfer, showListRef.current) || !transferred) {\n      console.log('trigger return');\n      return;\n    }\n    movingType.current.transferred = !movingType.current.transferred;\n    setMoving(newTransfer);\n  };\n\n  const onDrop = () => {\n    if (!isGaming.current) {\n      return;\n    }\n    let resultMoving: number[] = [];\n    let moving = movingRef.current;\n    while (1) {\n      if (isTrigger(onDown(moving), showListRef.current) || moving.at(-1)) {\n        resultMoving = moving;\n        break;\n      }\n      moving = onDown(moving);\n    }\n\n    setMoving(resultMoving);\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', (e) => {\n      switch (e.code) {\n        case 'ArrowLeft':\n          e.preventDefault();\n          handleLeft();\n          break;\n        case 'ArrowRight':\n          e.preventDefault();\n          handleRight();\n          break;\n        case 'ArrowDown':\n          e.preventDefault();\n          handleDown();\n          break;\n        case 'ArrowUp':\n          e.preventDefault();\n          handleTransfer();\n          break;\n        case 'Space':\n          e.preventDefault();\n          onDrop();\n          break;\n        default:\n          break;\n      }\n    });\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <div className='flex mb-4'>\n          <div\n            onClick={() => {\n              if (isStared) {\n                return;\n              }\n              setIsStared(true);\n              isGaming.current = true;\n              totalScore.current = 0;\n              handleStart();\n              timer = setInterval(() => {\n                handleDown();\n              }, 600);\n            }}\n            className='mr-4'\n          >\n            start\n          </div>\n          <div\n            className='mr-4'\n            onClick={() => {\n              if (isGaming.current) {\n                timer && clearInterval(timer);\n                timer = null;\n              } else {\n                timer = setInterval(() => {\n                  handleDown();\n                }, 600);\n              }\n              isGaming.current = !isGaming.current;\n              setIsPaused(!isPaused);\n            }}\n          >\n            {isPaused ? 'continue' : 'pause'}\n          </div>\n          <div\n            className='mr-4'\n            onClick={() => {\n              setIsPaused(false);\n              setIsStared(false);\n              setMoving(new Array(ROW).fill(0));\n              setShowList(new Array(ROW).fill(0));\n              isGaming.current = false;\n              totalScore.current = 0;\n              timer && clearInterval(timer);\n              timer = null;\n            }}\n          >\n            reset\n          </div>\n        </div>\n        <div className='flex mt-10'>\n          <div\n            className='mr-4'\n            onClick={() => {\n              handleLeft();\n            }}\n          >\n            left\n          </div>\n          <div\n            className='mr-4'\n            onClick={() => {\n              handleRight();\n            }}\n          >\n            right\n          </div>\n          <div\n            className='mr-4'\n            onClick={() => {\n              handleDown();\n            }}\n          >\n            down\n          </div>\n          <div\n            onClick={() => {\n              onDrop();\n            }}\n          >\n            drop\n          </div>\n        </div>\n        <div className='mt-10  mb-10'>{totalScore.current}</div>\n        <div\n          style={{\n            position: 'relative',\n            border: '1px solid gray',\n            width: 'fit-content',\n          }}\n        >\n          <div>\n            {showList.map((item, index) => {\n              return (\n                <div style={{ display: 'flex' }} key={'main' + index}>\n                  {decimalToBinary(item)\n                    .split('')\n                    .map((item, index) => {\n                      return (\n                        <div\n                          key={'sub' + index}\n                          style={{\n                            opacity: item === '1' ? 1 : 0,\n                            background: '#191B1F',\n                            margin: 1,\n                            width: 30,\n                            height: 30,\n                          }}\n                        >\n                          {/* {item} */}\n                        </div>\n                      );\n                    })}\n                </div>\n              );\n            })}\n          </div>\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n            }}\n          >\n            {moving.map((item, index) => {\n              return (\n                <div key={'moving-main' + index} style={{ display: 'flex' }}>\n                  {decimalToBinary(item)\n                    .split('')\n                    .map((item, index) => {\n                      return (\n                        <div\n                          key={'moving-sub' + index}\n                          style={{\n                            background: '#191B1F',\n                            opacity: item === '1' ? 1 : 0,\n                            width: 30,\n                            height: 30,\n                            margin: 1,\n                          }}\n                        >\n                          {/* {item} */}\n                        </div>\n                      );\n                    })}\n                </div>\n              );\n            })}\n          </div>\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              zIndex: 10,\n              background: 'black',\n              opacity: isPaused ? 0.8 : 0,\n              width: '100%',\n              height: '100%',\n            }}\n          ></div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/aaxis/Documents/lottery/components/Tab.tsx",[],[],"/Users/aaxis/Documents/lottery/components/TurnTable.tsx",["46"],[],"import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { LuckyWheel } from \"@lucky-canvas/react\";\nimport Tab from \"./Tab\";\n\nconst TurnTable: FC = () => {\n  const [target, setTarget] = useState(\"\");\n\n  const [blocks] = useState([\n    { padding: \"10px\", background: \"#e9e8fe\" },\n    { padding: \"10px\", background: \"#869cfa\" },\n  ]);\n\n  const allFood = {\n    快餐: [\n      {\n        text: \"炒饭\",\n        img: \"https://img2.baidu.com/it/u=1101523207,651871526&fm=253&fmt=auto&app=138&f=JPEG?w=497&h=294\",\n      },\n      {\n        text: \"炒面\",\n        img: \"https://img0.baidu.com/it/u=2609875662,1070264121&fm=253&fmt=auto&app=138&f=JPEG?w=750&h=500\",\n      },\n      {\n        text: \"炒河粉\",\n        img: \"https://img1.baidu.com/it/u=411924035,2701001621&fm=253&fmt=auto&app=138&f=JPG?w=669&h=500\",\n      },\n      {\n        text: \"盖浇饭\",\n        img: \"https://img1.baidu.com/it/u=2816415124,413253130&fm=253&fmt=auto&app=138&f=JPEG?w=735&h=500\",\n      },\n    ],\n    面食: [\n      {\n        text: \"抄手\",\n        img: \"https://img0.baidu.com/it/u=4043025353,2782716039&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=373\",\n      },\n      {\n        text: \"面条\",\n        img: \"https://img1.baidu.com/it/u=2064885703,711916222&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=281\",\n      },\n      {\n        text: \"饺子\",\n        img: \"https://img1.baidu.com/it/u=3564330157,3096608151&fm=253&fmt=auto&app=138&f=JPEG?w=748&h=500\",\n      },\n      {\n        text: \"螺蛳粉\",\n        img: \"https://img0.baidu.com/it/u=2365144078,1664837876&fm=253&fmt=auto&app=138&f=JPEG?w=540&h=360\",\n      },\n    ],\n    洋快餐: [\n      {\n        text: \"炸鸡\",\n        img: \"https://img1.baidu.com/it/u=1537115176,1287674847&fm=253&fmt=auto&app=138&f=JPEG?w=640&h=427\",\n      },\n      {\n        text: \"汉堡\",\n        img: \"https://img2.baidu.com/it/u=1170719478,4207668301&fm=253&fmt=auto&app=138&f=JPEG?w=750&h=500\",\n      },\n      {\n        text: \"鸡肉卷\",\n        img: \"https://img1.baidu.com/it/u=2617048388,173066499&fm=253&fmt=auto&app=138&f=JPEG?w=750&h=500\",\n      },\n      {\n        text: \"薯条\",\n        img: \"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.jj20.com%2Fup%2Fallimg%2F1114%2F022R1101525%2F21022Q01525-9-1200.jpg&refer=http%3A%2F%2Fimg.jj20.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1658398577&t=7124e43f9018c247ecc7160a04004fa0\",\n      },\n    ],\n    大餐: [\n      {\n        text: \"火锅\",\n        img: \"https://img2.baidu.com/it/u=3699208834,2646089679&fm=253&fmt=auto&app=138&f=JPEG?w=499&h=333\",\n      },\n      {\n        text: \"串串\",\n        img: \"https://img2.baidu.com/it/u=2113778501,1604825293&fm=253&fmt=auto&app=138&f=JPEG?w=600&h=400\",\n      },\n      {\n        text: \"烤肉\",\n        img: \"https://img0.baidu.com/it/u=1408386244,3710876263&fm=253&fmt=auto&app=138&f=JPEG?w=750&h=500\",\n      },\n      {\n        text: \"烤全羊\",\n        img: \"https://img0.baidu.com/it/u=4285189757,1564247455&fm=253&fmt=auto&app=138&f=JPEG?w=500&h=375\",\n      },\n    ],\n  } as const;\n\n  type TFoodKeys = keyof typeof allFood;\n\n  const [type, setType] = useState<TFoodKeys>(\"快餐\");\n\n  const [prizes, setPrizes] = useState<TPrizes | null>(null);\n\n  const [buttons] = useState([\n    { radius: \"40%\", background: \"#617df2\" },\n    { radius: \"35%\", background: \"#afc8ff\" },\n    {\n      radius: \"30%\",\n      background: \"#869cfa\",\n      pointer: true,\n      fonts: [{ text: \"开始\", top: \"-10px\" }],\n    },\n  ]);\n\n  useEffect(() => {\n    const cur = allFood[type].map((item, index) => {\n      const newItem = {\n        background: index % 2 ? \"#e9e8fe\" : \"#b8c5f2\",\n        range: 25,\n        fonts: [{ text: item.text }],\n        imgs: [\n          {\n            src: item.img ?? \"\",\n            height: \"50px\",\n            width: \"60px\",\n            top: \"30px\",\n          },\n        ],\n      };\n      return newItem;\n    });\n    setPrizes(cur);\n  }, [type]);\n\n  const myLucky = useRef<TMethods>();\n\n  const renderFoodType = () => {\n    let keys = Object.keys(allFood);\n\n    return (\n      <div className=\" mb-3\">\n        <Tab\n          options={keys}\n          value={type}\n          onChange={(value: string) => {\n            setType(value as any);\n          }}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\" w-full h-full\">\n      <div className=\" w-full text-center absolute top-1/2 left-1/2  -translate-x-1/2  -translate-y-1/2 \">\n        {renderFoodType()}\n        <div className={` text-5xl text-center mb-10  `}>\n          {target ? (\n            <div className=\"target\">今天我要吃{target}!!!</div>\n          ) : (\n            <div> 今天吃啥子</div>\n          )}\n        </div>\n        <div className=\" mx-auto w-[300px]\">\n          <LuckyWheel\n            ref={myLucky}\n            width=\"300px\"\n            height=\"300px\"\n            blocks={blocks}\n            prizes={prizes}\n            buttons={buttons}\n            onStart={() => {\n              setTarget(\"\");\n              myLucky.current!.play();\n\n              myLucky.current!.stop();\n            }}\n            onEnd={(prize: any) => {\n              if (prize.fonts) {\n                setTarget(prize.fonts[0].text);\n              }\n            }}\n            accelerationTime={1000}\n            decelerationTime={1000}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TurnTable;\n","/Users/aaxis/Documents/lottery/components/Weekend.tsx",["47","48","49"],[],"import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { LuckyWheel } from \"@lucky-canvas/react\";\nimport Tab from \"./Tab\";\n\nconst Weekend: FC = () => {\n  const [target, setTarget] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [blocks] = useState([\n    { padding: \"10px\", background: \"#e9e8fe\" },\n    { padding: \"10px\", background: \"#869cfa\" },\n  ]);\n\n  const allChoice = {\n    weekend: [\n      {\n        text: \"学习\",\n        img: \"https://img2.baidu.com/it/u=1567913580,4230846359&fm=253&fmt=auto&app=138&f=JPEG?w=658&h=439\",\n      },\n      {\n        text: \"打游戏\",\n        img: \"https://img2.baidu.com/it/u=157576817,45563585&fm=253&fmt=auto&app=138&f=JPEG?w=560&h=373\",\n      },\n      {\n        text: \"唱歌\",\n        img: \"https://img2.baidu.com/it/u=208066740,2765928421&fm=253&fmt=auto&app=120&f=JPEG?w=620&h=399\",\n      },\n      {\n        text: \"躺尸\",\n        img: \"https://img0.baidu.com/it/u=311426565,100286978&fm=253&fmt=auto&app=138&f=JPG?w=800&h=500\",\n      },\n    ],\n  } as const;\n\n  const [prizes, setPrizes] = useState<TPrizes | null>(null);\n\n  const [buttons] = useState([\n    { radius: \"40%\", background: \"#617df2\" },\n    { radius: \"35%\", background: \"#afc8ff\" },\n    {\n      radius: \"30%\",\n      background: \"#869cfa\",\n      pointer: true,\n      fonts: [{ text: \"开始\", top: \"-10px\" }],\n    },\n  ]);\n\n  useEffect(() => {\n    const cur = allChoice.weekend.map((item, index) => {\n      const newItem = {\n        background: index % 2 ? \"#e9e8fe\" : \"#b8c5f2\",\n        range: index === 0 ? 1 : 33,\n        fonts: [{ text: item.text }],\n        imgs: [\n          {\n            src: item.img ?? \"\",\n            height: \"50px\",\n            width: \"60px\",\n            top: \"30px\",\n          },\n        ],\n      };\n      return newItem;\n    });\n    setPrizes(cur);\n  }, []);\n\n  const myLucky = useRef<TMethods>();\n\n  return (\n    <div className=\" w-full h-full\">\n      <div className=\" w-full text-center absolute top-1/2 left-1/2  -translate-x-1/2  -translate-y-1/2 \">\n        <div className={` text-5xl text-center mb-10  `}>\n          {target ? (\n            <div className=\"target\">我要{target}!!!</div>\n          ) : (\n            <div> 周末做些什么呢？</div>\n          )}\n        </div>\n        {target ? (\n          <div className=\" mx-auto w-[300px]\">\n            <img src={image} />\n            <div\n              className=\" mt-4 cursor-pointer bg-cyan-100  w-auto\"\n              onClick={() => {\n                setImage(\"\");\n                setTarget(\"\");\n              }}\n            >\n              重新选择\n            </div>\n          </div>\n        ) : (\n          <div className=\" mx-auto w-[300px]\">\n            <LuckyWheel\n              ref={myLucky}\n              width=\"300px\"\n              height=\"300px\"\n              blocks={blocks}\n              prizes={prizes}\n              buttons={buttons}\n              onStart={() => {\n                setTarget(\"\");\n                myLucky.current!.play();\n\n                myLucky.current!.stop();\n              }}\n              onEnd={(prize: any) => {\n                if (prize.fonts) {\n                  setTarget(prize.fonts[0].text);\n                  setImage(prize.imgs[0].src);\n                }\n              }}\n              accelerationTime={1000}\n              decelerationTime={1000}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Weekend;\n","/Users/aaxis/Documents/lottery/components/index.tsx",[],[],{"ruleId":"50","severity":1,"message":"51","line":493,"column":6,"nodeType":"52","endLine":493,"endColumn":8,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":123,"column":6,"nodeType":"52","endLine":123,"endColumn":12,"suggestions":"55"},{"ruleId":"50","severity":1,"message":"56","line":65,"column":6,"nodeType":"52","endLine":65,"endColumn":8,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":81,"column":13,"nodeType":"60","endLine":81,"endColumn":32},{"ruleId":"61","severity":1,"message":"62","line":81,"column":13,"nodeType":"60","endLine":81,"endColumn":32},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleDown', 'handleLeft', 'handleRight', 'handleTransfer', and 'onDrop'. Either include them or remove the dependency array.","ArrayExpression",["63"],"React Hook useEffect has a missing dependency: 'allFood'. Either include it or remove the dependency array.",["64"],"React Hook useEffect has a missing dependency: 'allChoice.weekend'. Either include it or remove the dependency array.",["65"],"@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},"Update the dependencies array to be: [handleDown, handleLeft, handleRight, handleTransfer, onDrop]",{"range":"72","text":"73"},"Update the dependencies array to be: [allFood, type]",{"range":"74","text":"75"},"Update the dependencies array to be: [allChoice.weekend]",{"range":"76","text":"77"},[12627,12629],"[handleDown, handleLeft, handleRight, handleTransfer, onDrop]",[3809,3815],"[allFood, type]",[1806,1808],"[allChoice.weekend]"]